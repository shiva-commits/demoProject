package PD;// Generated by Selenium IDE

import org.junit.Test;
import org.junit.Before;
import org.junit.After;

import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;

import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.*;
import java.util.concurrent.TimeUnit;
import java.net.MalformedURLException;
import java.net.URL;

public class PDGamePlayTest {

	private String userName, password, tableName;
	private long count;

	private WebDriver driver;
	private Map<String, Object> vars;
	JavascriptExecutor js;

	public void setUserAttribute(String[] userAttribute, long count) {
		this.userName = userAttribute[0];
		this.password = userAttribute[1];
		this.tableName = userAttribute[2];
		this.count = count;
	}

	@Before
	public void setUp() throws MalformedURLException {

		if (userName == null || password == null || tableName == null) {
			this.userName = "siva.d1";// siva.d2
			this.password = "test123";
			this.tableName = "test5_2";// test11
		}

		DesiredCapabilities desiredCapabilities = DesiredCapabilities.chrome();
		desiredCapabilities.setPlatform(Platform.WINDOWS);
		// driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"),
		// desiredCapabilities);
		driver = new RemoteWebDriver(new URL("http://192.168.0.106:5566/wd/hub"), desiredCapabilities);

		// driver = new ChromeDriver();
		// driver = new HtmlUnitDriver(false);
		js = (JavascriptExecutor) driver;
		vars = new HashMap<String, Object>();
	}

	@After
	public void tearDown() {
		// driver.quit();
	}
	
	@Test
	public void pDGamplay_multiUser() {
		StartPDGamePlay st = new StartPDGamePlay();
		st.pDGamePlay();
	}

	@Test
	public void pDGamePlay() {
		// Test name: PDGamePlay
		// Step # | name | target | value

		// 1 | open | /poker/index.html |
		driver.get("https://qaenv.pokerdangal.com/poker/index.html#!/");

		// 2 | setWindowSize | max |
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);

		// 3 | wait | 20 sec |
		wait(20);

		// 4 | type username
		List<WebElement> username1;
		do {
			username1 = driver.findElements(By.xpath("//input[@type='text']"));
			System.out.println("username1 : " + username1.size());
			wait(1);
		} while (username1.size() == 0);

		((WebElement) username1.get(0)).sendKeys(new CharSequence[] { this.userName });

		// 5 | type password
		List<WebElement> password1 = driver.findElements(By.xpath("//input[@type = 'password']"));
		((WebElement) password1.get(0)).sendKeys(new CharSequence[] { this.password });

		// 6 | click login button
		WebElement login = driver.findElement(By.xpath("//button[@id='tst-pkw-login-button']"));
		login.click();

		wait(10);

		System.out.println("1. all windows" + driver.getWindowHandles());

		vars.put("window_handles", driver.getWindowHandles());

		List<WebElement> tables;
		do {
			tables = driver.findElements(By.xpath("//tr[@st-select-row='table']"));
			System.out.println("tables : " + tables.size());
			wait(1);
		} while (tables.size() == 0);

		wait(Integer.parseInt(count + ""));

		for (int i = 0; i < tables.size(); i++) {
			WebElement tableElement = tables.get(i);

			Actions builder = new Actions(driver);
			builder.moveToElement(tableElement).perform();

			String tableName = tableElement.getText();
			if (tableName.contains(this.tableName)) {
				String newTableName = tableName.replace("\n", " ").replace(" ", ",");
				System.out.println("tableName : " + newTableName);
				String tableNameArray[] = newTableName.split(",");
				if (tableNameArray.length >= 3) {
					String playersCount = tableNameArray[tableNameArray.length - 3];
					String playerArr[] = playersCount.split("/");
					int currentPlayers = Integer.parseInt(playerArr[0]);
					int totalPlayers = Integer.parseInt(playerArr[1]);

					if (currentPlayers < totalPlayers) {
						tableElement.click();

						// WebElement buttonElement = (WebElement)
						// tableElement.findElement(By.xpath("//button[@class='table-play-button btn
						// btn-primary ng-binding']"));
						WebElement buttonElement = (WebElement) tableElement.findElement(By.tagName("button"));
						buttonElement.click();
						break;
					}
				}
			}
		}

		wait(20);
		System.out.println("2. all windows" + driver.getWindowHandles());

		vars.put("win6853", waitForWindow(2000));
		vars.put("root", driver.getWindowHandle());

		driver.switchTo().window(vars.get("win6853").toString());

		System.out.println("3. all windows" + driver.getWindowHandle());

		wait(20);

		System.out.println("3. all windows" + driver.getTitle() + "," + driver.getCurrentUrl());

		List<WebElement> emptySeats;
		do {
			emptySeats = driver
					.findElements(By.xpath("//img[@class ='pkw-player-div-child pkw-player-empty-seat btn ng-scope']"));
			System.out.println("emptySeats : " + emptySeats.size());
			wait(1);
		} while (emptySeats.size() == 0);

		System.out.println("emptySeats : " + emptySeats.size());

		for (WebElement seatElement : emptySeats) {
			String seatNo = seatElement.getText();
			System.out.println("seatNo : " + seatNo);
			seatElement.click();
			break;
		}

		 wait(2);

		
		  List<WebElement> minBuyInElements; do { minBuyInElements =
		  driver.findElements(By.xpath("//div[@class ='pkw-checkbox-bg']"));
		  System.out.println("minBuyInElements : " + minBuyInElements.size()); wait(1);
		  } while (minBuyInElements.size() == 0);
		  
		  for (WebElement buyInElement : minBuyInElements) { buyInElement.click();
		  break; }
		 

		WebElement buyInButtonElement = driver.findElement(By.xpath("//button[contains(text(),'BUY')]"));
		buyInButtonElement.click();
	}

	private String waitForWindow(int timeout) {
		try {
			Thread.sleep(timeout);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		Set<String> whNow = driver.getWindowHandles();
		Set<String> whThen = (Set<String>) vars.get("window_handles");
		if (whNow.size() > whThen.size()) {
			whNow.removeAll(whThen);
		}
		return whNow.iterator().next();
	}

	private void wait(int sec) {
		int count = 0;
		while (count != sec) {
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println(e);
			}
			count++;
		}
	}
}
